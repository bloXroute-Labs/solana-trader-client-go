// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApiClient is the client API for Api service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiClient interface {
	GetPrice(ctx context.Context, in *GetPriceRequest, opts ...grpc.CallOption) (*GetPriceResponse, error)
	GetMarkets(ctx context.Context, in *GetMarketsRequest, opts ...grpc.CallOption) (*GetMarketsResponse, error)
	GetPools(ctx context.Context, in *GetPoolsRequest, opts ...grpc.CallOption) (*GetPoolsResponse, error)
	GetTickers(ctx context.Context, in *GetTickersRequest, opts ...grpc.CallOption) (*GetTickersResponse, error)
	GetKline(ctx context.Context, in *GetKlineRequest, opts ...grpc.CallOption) (*GetKlineResponse, error)
	GetOrderbook(ctx context.Context, in *GetOrderbookRequest, opts ...grpc.CallOption) (*GetOrderbookResponse, error)
	GetTrades(ctx context.Context, in *GetTradesRequest, opts ...grpc.CallOption) (*GetTradesResponse, error)
	GetQuotes(ctx context.Context, in *GetQuotesRequest, opts ...grpc.CallOption) (*GetQuotesResponse, error)
	// system API
	GetServerTime(ctx context.Context, in *GetServerTimeRequest, opts ...grpc.CallOption) (*GetServerTimeResponse, error)
	GetRecentBlockHash(ctx context.Context, in *GetRecentBlockHashRequest, opts ...grpc.CallOption) (*GetRecentBlockHashResponse, error)
	// account endpoints
	GetAccountBalance(ctx context.Context, in *GetAccountBalanceRequest, opts ...grpc.CallOption) (*GetAccountBalanceResponse, error)
	// trade endpoints
	PostOrder(ctx context.Context, in *PostOrderRequest, opts ...grpc.CallOption) (*PostOrderResponse, error)
	PostSubmit(ctx context.Context, in *PostSubmitRequest, opts ...grpc.CallOption) (*PostSubmitResponse, error)
	PostSubmitBatch(ctx context.Context, in *PostSubmitBatchRequest, opts ...grpc.CallOption) (*PostSubmitBatchResponse, error)
	PostCancelOrder(ctx context.Context, in *PostCancelOrderRequest, opts ...grpc.CallOption) (*PostCancelOrderResponse, error)
	PostCancelByClientOrderID(ctx context.Context, in *PostCancelByClientOrderIDRequest, opts ...grpc.CallOption) (*PostCancelOrderResponse, error)
	PostCancelAll(ctx context.Context, in *PostCancelAllRequest, opts ...grpc.CallOption) (*PostCancelAllResponse, error)
	PostReplaceByClientOrderID(ctx context.Context, in *PostOrderRequest, opts ...grpc.CallOption) (*PostOrderResponse, error)
	PostReplaceOrder(ctx context.Context, in *PostReplaceOrderRequest, opts ...grpc.CallOption) (*PostOrderResponse, error)
	PostSettle(ctx context.Context, in *PostSettleRequest, opts ...grpc.CallOption) (*PostSettleResponse, error)
	PostTradeSwap(ctx context.Context, in *TradeSwapRequest, opts ...grpc.CallOption) (*TradeSwapResponse, error)
	GetOrders(ctx context.Context, in *GetOrdersRequest, opts ...grpc.CallOption) (*GetOrdersResponse, error)
	GetOpenOrders(ctx context.Context, in *GetOpenOrdersRequest, opts ...grpc.CallOption) (*GetOpenOrdersResponse, error)
	GetOrderByID(ctx context.Context, in *GetOrderByIDRequest, opts ...grpc.CallOption) (*GetOrderByIDResponse, error)
	GetUnsettled(ctx context.Context, in *GetUnsettledRequest, opts ...grpc.CallOption) (*GetUnsettledResponse, error)
	PostRouteTradeSwap(ctx context.Context, in *RouteTradeSwapRequest, opts ...grpc.CallOption) (*TradeSwapResponse, error)
	// streaming endpoints
	GetOrderbooksStream(ctx context.Context, in *GetOrderbooksRequest, opts ...grpc.CallOption) (Api_GetOrderbooksStreamClient, error)
	GetTickersStream(ctx context.Context, in *GetTickersRequest, opts ...grpc.CallOption) (Api_GetTickersStreamClient, error)
	GetMarketDepthStream(ctx context.Context, in *GetMarketsRequest, opts ...grpc.CallOption) (Api_GetMarketDepthStreamClient, error)
	GetTradesStream(ctx context.Context, in *GetTradesRequest, opts ...grpc.CallOption) (Api_GetTradesStreamClient, error)
	GetOrderStatusStream(ctx context.Context, in *GetOrderStatusStreamRequest, opts ...grpc.CallOption) (Api_GetOrderStatusStreamClient, error)
	GetRecentBlockHashStream(ctx context.Context, in *GetRecentBlockHashRequest, opts ...grpc.CallOption) (Api_GetRecentBlockHashStreamClient, error)
	GetQuotesStream(ctx context.Context, in *GetQuotesStreamRequest, opts ...grpc.CallOption) (Api_GetQuotesStreamClient, error)
	GetPoolReservesStream(ctx context.Context, in *GetPoolReservesStreamRequest, opts ...grpc.CallOption) (Api_GetPoolReservesStreamClient, error)
	GetPricesStream(ctx context.Context, in *GetPricesStreamRequest, opts ...grpc.CallOption) (Api_GetPricesStreamClient, error)
}

type apiClient struct {
	cc grpc.ClientConnInterface
}

func NewApiClient(cc grpc.ClientConnInterface) ApiClient {
	return &apiClient{cc}
}

func (c *apiClient) GetPrice(ctx context.Context, in *GetPriceRequest, opts ...grpc.CallOption) (*GetPriceResponse, error) {
	out := new(GetPriceResponse)
	err := c.cc.Invoke(ctx, "/api.Api/GetPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetMarkets(ctx context.Context, in *GetMarketsRequest, opts ...grpc.CallOption) (*GetMarketsResponse, error) {
	out := new(GetMarketsResponse)
	err := c.cc.Invoke(ctx, "/api.Api/GetMarkets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetPools(ctx context.Context, in *GetPoolsRequest, opts ...grpc.CallOption) (*GetPoolsResponse, error) {
	out := new(GetPoolsResponse)
	err := c.cc.Invoke(ctx, "/api.Api/GetPools", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetTickers(ctx context.Context, in *GetTickersRequest, opts ...grpc.CallOption) (*GetTickersResponse, error) {
	out := new(GetTickersResponse)
	err := c.cc.Invoke(ctx, "/api.Api/GetTickers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetKline(ctx context.Context, in *GetKlineRequest, opts ...grpc.CallOption) (*GetKlineResponse, error) {
	out := new(GetKlineResponse)
	err := c.cc.Invoke(ctx, "/api.Api/GetKline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetOrderbook(ctx context.Context, in *GetOrderbookRequest, opts ...grpc.CallOption) (*GetOrderbookResponse, error) {
	out := new(GetOrderbookResponse)
	err := c.cc.Invoke(ctx, "/api.Api/GetOrderbook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetTrades(ctx context.Context, in *GetTradesRequest, opts ...grpc.CallOption) (*GetTradesResponse, error) {
	out := new(GetTradesResponse)
	err := c.cc.Invoke(ctx, "/api.Api/GetTrades", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetQuotes(ctx context.Context, in *GetQuotesRequest, opts ...grpc.CallOption) (*GetQuotesResponse, error) {
	out := new(GetQuotesResponse)
	err := c.cc.Invoke(ctx, "/api.Api/GetQuotes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetServerTime(ctx context.Context, in *GetServerTimeRequest, opts ...grpc.CallOption) (*GetServerTimeResponse, error) {
	out := new(GetServerTimeResponse)
	err := c.cc.Invoke(ctx, "/api.Api/GetServerTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetRecentBlockHash(ctx context.Context, in *GetRecentBlockHashRequest, opts ...grpc.CallOption) (*GetRecentBlockHashResponse, error) {
	out := new(GetRecentBlockHashResponse)
	err := c.cc.Invoke(ctx, "/api.Api/GetRecentBlockHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetAccountBalance(ctx context.Context, in *GetAccountBalanceRequest, opts ...grpc.CallOption) (*GetAccountBalanceResponse, error) {
	out := new(GetAccountBalanceResponse)
	err := c.cc.Invoke(ctx, "/api.Api/GetAccountBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) PostOrder(ctx context.Context, in *PostOrderRequest, opts ...grpc.CallOption) (*PostOrderResponse, error) {
	out := new(PostOrderResponse)
	err := c.cc.Invoke(ctx, "/api.Api/PostOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) PostSubmit(ctx context.Context, in *PostSubmitRequest, opts ...grpc.CallOption) (*PostSubmitResponse, error) {
	out := new(PostSubmitResponse)
	err := c.cc.Invoke(ctx, "/api.Api/PostSubmit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) PostSubmitBatch(ctx context.Context, in *PostSubmitBatchRequest, opts ...grpc.CallOption) (*PostSubmitBatchResponse, error) {
	out := new(PostSubmitBatchResponse)
	err := c.cc.Invoke(ctx, "/api.Api/PostSubmitBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) PostCancelOrder(ctx context.Context, in *PostCancelOrderRequest, opts ...grpc.CallOption) (*PostCancelOrderResponse, error) {
	out := new(PostCancelOrderResponse)
	err := c.cc.Invoke(ctx, "/api.Api/PostCancelOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) PostCancelByClientOrderID(ctx context.Context, in *PostCancelByClientOrderIDRequest, opts ...grpc.CallOption) (*PostCancelOrderResponse, error) {
	out := new(PostCancelOrderResponse)
	err := c.cc.Invoke(ctx, "/api.Api/PostCancelByClientOrderID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) PostCancelAll(ctx context.Context, in *PostCancelAllRequest, opts ...grpc.CallOption) (*PostCancelAllResponse, error) {
	out := new(PostCancelAllResponse)
	err := c.cc.Invoke(ctx, "/api.Api/PostCancelAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) PostReplaceByClientOrderID(ctx context.Context, in *PostOrderRequest, opts ...grpc.CallOption) (*PostOrderResponse, error) {
	out := new(PostOrderResponse)
	err := c.cc.Invoke(ctx, "/api.Api/PostReplaceByClientOrderID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) PostReplaceOrder(ctx context.Context, in *PostReplaceOrderRequest, opts ...grpc.CallOption) (*PostOrderResponse, error) {
	out := new(PostOrderResponse)
	err := c.cc.Invoke(ctx, "/api.Api/PostReplaceOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) PostSettle(ctx context.Context, in *PostSettleRequest, opts ...grpc.CallOption) (*PostSettleResponse, error) {
	out := new(PostSettleResponse)
	err := c.cc.Invoke(ctx, "/api.Api/PostSettle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) PostTradeSwap(ctx context.Context, in *TradeSwapRequest, opts ...grpc.CallOption) (*TradeSwapResponse, error) {
	out := new(TradeSwapResponse)
	err := c.cc.Invoke(ctx, "/api.Api/PostTradeSwap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetOrders(ctx context.Context, in *GetOrdersRequest, opts ...grpc.CallOption) (*GetOrdersResponse, error) {
	out := new(GetOrdersResponse)
	err := c.cc.Invoke(ctx, "/api.Api/GetOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetOpenOrders(ctx context.Context, in *GetOpenOrdersRequest, opts ...grpc.CallOption) (*GetOpenOrdersResponse, error) {
	out := new(GetOpenOrdersResponse)
	err := c.cc.Invoke(ctx, "/api.Api/GetOpenOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetOrderByID(ctx context.Context, in *GetOrderByIDRequest, opts ...grpc.CallOption) (*GetOrderByIDResponse, error) {
	out := new(GetOrderByIDResponse)
	err := c.cc.Invoke(ctx, "/api.Api/GetOrderByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetUnsettled(ctx context.Context, in *GetUnsettledRequest, opts ...grpc.CallOption) (*GetUnsettledResponse, error) {
	out := new(GetUnsettledResponse)
	err := c.cc.Invoke(ctx, "/api.Api/GetUnsettled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) PostRouteTradeSwap(ctx context.Context, in *RouteTradeSwapRequest, opts ...grpc.CallOption) (*TradeSwapResponse, error) {
	out := new(TradeSwapResponse)
	err := c.cc.Invoke(ctx, "/api.Api/PostRouteTradeSwap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetOrderbooksStream(ctx context.Context, in *GetOrderbooksRequest, opts ...grpc.CallOption) (Api_GetOrderbooksStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Api_ServiceDesc.Streams[0], "/api.Api/GetOrderbooksStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &apiGetOrderbooksStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Api_GetOrderbooksStreamClient interface {
	Recv() (*GetOrderbooksStreamResponse, error)
	grpc.ClientStream
}

type apiGetOrderbooksStreamClient struct {
	grpc.ClientStream
}

func (x *apiGetOrderbooksStreamClient) Recv() (*GetOrderbooksStreamResponse, error) {
	m := new(GetOrderbooksStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *apiClient) GetTickersStream(ctx context.Context, in *GetTickersRequest, opts ...grpc.CallOption) (Api_GetTickersStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Api_ServiceDesc.Streams[1], "/api.Api/GetTickersStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &apiGetTickersStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Api_GetTickersStreamClient interface {
	Recv() (*GetTickersStreamResponse, error)
	grpc.ClientStream
}

type apiGetTickersStreamClient struct {
	grpc.ClientStream
}

func (x *apiGetTickersStreamClient) Recv() (*GetTickersStreamResponse, error) {
	m := new(GetTickersStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *apiClient) GetMarketDepthStream(ctx context.Context, in *GetMarketsRequest, opts ...grpc.CallOption) (Api_GetMarketDepthStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Api_ServiceDesc.Streams[2], "/api.Api/GetMarketDepthStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &apiGetMarketDepthStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Api_GetMarketDepthStreamClient interface {
	Recv() (*GetMarketDepthStreamResponse, error)
	grpc.ClientStream
}

type apiGetMarketDepthStreamClient struct {
	grpc.ClientStream
}

func (x *apiGetMarketDepthStreamClient) Recv() (*GetMarketDepthStreamResponse, error) {
	m := new(GetMarketDepthStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *apiClient) GetTradesStream(ctx context.Context, in *GetTradesRequest, opts ...grpc.CallOption) (Api_GetTradesStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Api_ServiceDesc.Streams[3], "/api.Api/GetTradesStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &apiGetTradesStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Api_GetTradesStreamClient interface {
	Recv() (*GetTradesStreamResponse, error)
	grpc.ClientStream
}

type apiGetTradesStreamClient struct {
	grpc.ClientStream
}

func (x *apiGetTradesStreamClient) Recv() (*GetTradesStreamResponse, error) {
	m := new(GetTradesStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *apiClient) GetOrderStatusStream(ctx context.Context, in *GetOrderStatusStreamRequest, opts ...grpc.CallOption) (Api_GetOrderStatusStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Api_ServiceDesc.Streams[4], "/api.Api/GetOrderStatusStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &apiGetOrderStatusStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Api_GetOrderStatusStreamClient interface {
	Recv() (*GetOrderStatusStreamResponse, error)
	grpc.ClientStream
}

type apiGetOrderStatusStreamClient struct {
	grpc.ClientStream
}

func (x *apiGetOrderStatusStreamClient) Recv() (*GetOrderStatusStreamResponse, error) {
	m := new(GetOrderStatusStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *apiClient) GetRecentBlockHashStream(ctx context.Context, in *GetRecentBlockHashRequest, opts ...grpc.CallOption) (Api_GetRecentBlockHashStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Api_ServiceDesc.Streams[5], "/api.Api/GetRecentBlockHashStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &apiGetRecentBlockHashStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Api_GetRecentBlockHashStreamClient interface {
	Recv() (*GetRecentBlockHashResponse, error)
	grpc.ClientStream
}

type apiGetRecentBlockHashStreamClient struct {
	grpc.ClientStream
}

func (x *apiGetRecentBlockHashStreamClient) Recv() (*GetRecentBlockHashResponse, error) {
	m := new(GetRecentBlockHashResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *apiClient) GetQuotesStream(ctx context.Context, in *GetQuotesStreamRequest, opts ...grpc.CallOption) (Api_GetQuotesStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Api_ServiceDesc.Streams[6], "/api.Api/GetQuotesStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &apiGetQuotesStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Api_GetQuotesStreamClient interface {
	Recv() (*GetQuotesStreamResponse, error)
	grpc.ClientStream
}

type apiGetQuotesStreamClient struct {
	grpc.ClientStream
}

func (x *apiGetQuotesStreamClient) Recv() (*GetQuotesStreamResponse, error) {
	m := new(GetQuotesStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *apiClient) GetPoolReservesStream(ctx context.Context, in *GetPoolReservesStreamRequest, opts ...grpc.CallOption) (Api_GetPoolReservesStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Api_ServiceDesc.Streams[7], "/api.Api/GetPoolReservesStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &apiGetPoolReservesStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Api_GetPoolReservesStreamClient interface {
	Recv() (*GetPoolReservesStreamResponse, error)
	grpc.ClientStream
}

type apiGetPoolReservesStreamClient struct {
	grpc.ClientStream
}

func (x *apiGetPoolReservesStreamClient) Recv() (*GetPoolReservesStreamResponse, error) {
	m := new(GetPoolReservesStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *apiClient) GetPricesStream(ctx context.Context, in *GetPricesStreamRequest, opts ...grpc.CallOption) (Api_GetPricesStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Api_ServiceDesc.Streams[8], "/api.Api/GetPricesStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &apiGetPricesStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Api_GetPricesStreamClient interface {
	Recv() (*GetPricesStreamResponse, error)
	grpc.ClientStream
}

type apiGetPricesStreamClient struct {
	grpc.ClientStream
}

func (x *apiGetPricesStreamClient) Recv() (*GetPricesStreamResponse, error) {
	m := new(GetPricesStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ApiServer is the server API for Api service.
// All implementations must embed UnimplementedApiServer
// for forward compatibility
type ApiServer interface {
	GetPrice(context.Context, *GetPriceRequest) (*GetPriceResponse, error)
	GetMarkets(context.Context, *GetMarketsRequest) (*GetMarketsResponse, error)
	GetPools(context.Context, *GetPoolsRequest) (*GetPoolsResponse, error)
	GetTickers(context.Context, *GetTickersRequest) (*GetTickersResponse, error)
	GetKline(context.Context, *GetKlineRequest) (*GetKlineResponse, error)
	GetOrderbook(context.Context, *GetOrderbookRequest) (*GetOrderbookResponse, error)
	GetTrades(context.Context, *GetTradesRequest) (*GetTradesResponse, error)
	GetQuotes(context.Context, *GetQuotesRequest) (*GetQuotesResponse, error)
	// system API
	GetServerTime(context.Context, *GetServerTimeRequest) (*GetServerTimeResponse, error)
	GetRecentBlockHash(context.Context, *GetRecentBlockHashRequest) (*GetRecentBlockHashResponse, error)
	// account endpoints
	GetAccountBalance(context.Context, *GetAccountBalanceRequest) (*GetAccountBalanceResponse, error)
	// trade endpoints
	PostOrder(context.Context, *PostOrderRequest) (*PostOrderResponse, error)
	PostSubmit(context.Context, *PostSubmitRequest) (*PostSubmitResponse, error)
	PostSubmitBatch(context.Context, *PostSubmitBatchRequest) (*PostSubmitBatchResponse, error)
	PostCancelOrder(context.Context, *PostCancelOrderRequest) (*PostCancelOrderResponse, error)
	PostCancelByClientOrderID(context.Context, *PostCancelByClientOrderIDRequest) (*PostCancelOrderResponse, error)
	PostCancelAll(context.Context, *PostCancelAllRequest) (*PostCancelAllResponse, error)
	PostReplaceByClientOrderID(context.Context, *PostOrderRequest) (*PostOrderResponse, error)
	PostReplaceOrder(context.Context, *PostReplaceOrderRequest) (*PostOrderResponse, error)
	PostSettle(context.Context, *PostSettleRequest) (*PostSettleResponse, error)
	PostTradeSwap(context.Context, *TradeSwapRequest) (*TradeSwapResponse, error)
	GetOrders(context.Context, *GetOrdersRequest) (*GetOrdersResponse, error)
	GetOpenOrders(context.Context, *GetOpenOrdersRequest) (*GetOpenOrdersResponse, error)
	GetOrderByID(context.Context, *GetOrderByIDRequest) (*GetOrderByIDResponse, error)
	GetUnsettled(context.Context, *GetUnsettledRequest) (*GetUnsettledResponse, error)
	PostRouteTradeSwap(context.Context, *RouteTradeSwapRequest) (*TradeSwapResponse, error)
	// streaming endpoints
	GetOrderbooksStream(*GetOrderbooksRequest, Api_GetOrderbooksStreamServer) error
	GetTickersStream(*GetTickersRequest, Api_GetTickersStreamServer) error
	GetMarketDepthStream(*GetMarketsRequest, Api_GetMarketDepthStreamServer) error
	GetTradesStream(*GetTradesRequest, Api_GetTradesStreamServer) error
	GetOrderStatusStream(*GetOrderStatusStreamRequest, Api_GetOrderStatusStreamServer) error
	GetRecentBlockHashStream(*GetRecentBlockHashRequest, Api_GetRecentBlockHashStreamServer) error
	GetQuotesStream(*GetQuotesStreamRequest, Api_GetQuotesStreamServer) error
	GetPoolReservesStream(*GetPoolReservesStreamRequest, Api_GetPoolReservesStreamServer) error
	GetPricesStream(*GetPricesStreamRequest, Api_GetPricesStreamServer) error
	mustEmbedUnimplementedApiServer()
}

// UnimplementedApiServer must be embedded to have forward compatible implementations.
type UnimplementedApiServer struct {
}

func (UnimplementedApiServer) GetPrice(context.Context, *GetPriceRequest) (*GetPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrice not implemented")
}
func (UnimplementedApiServer) GetMarkets(context.Context, *GetMarketsRequest) (*GetMarketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarkets not implemented")
}
func (UnimplementedApiServer) GetPools(context.Context, *GetPoolsRequest) (*GetPoolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPools not implemented")
}
func (UnimplementedApiServer) GetTickers(context.Context, *GetTickersRequest) (*GetTickersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTickers not implemented")
}
func (UnimplementedApiServer) GetKline(context.Context, *GetKlineRequest) (*GetKlineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKline not implemented")
}
func (UnimplementedApiServer) GetOrderbook(context.Context, *GetOrderbookRequest) (*GetOrderbookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderbook not implemented")
}
func (UnimplementedApiServer) GetTrades(context.Context, *GetTradesRequest) (*GetTradesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrades not implemented")
}
func (UnimplementedApiServer) GetQuotes(context.Context, *GetQuotesRequest) (*GetQuotesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuotes not implemented")
}
func (UnimplementedApiServer) GetServerTime(context.Context, *GetServerTimeRequest) (*GetServerTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerTime not implemented")
}
func (UnimplementedApiServer) GetRecentBlockHash(context.Context, *GetRecentBlockHashRequest) (*GetRecentBlockHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecentBlockHash not implemented")
}
func (UnimplementedApiServer) GetAccountBalance(context.Context, *GetAccountBalanceRequest) (*GetAccountBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountBalance not implemented")
}
func (UnimplementedApiServer) PostOrder(context.Context, *PostOrderRequest) (*PostOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostOrder not implemented")
}
func (UnimplementedApiServer) PostSubmit(context.Context, *PostSubmitRequest) (*PostSubmitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostSubmit not implemented")
}
func (UnimplementedApiServer) PostSubmitBatch(context.Context, *PostSubmitBatchRequest) (*PostSubmitBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostSubmitBatch not implemented")
}
func (UnimplementedApiServer) PostCancelOrder(context.Context, *PostCancelOrderRequest) (*PostCancelOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostCancelOrder not implemented")
}
func (UnimplementedApiServer) PostCancelByClientOrderID(context.Context, *PostCancelByClientOrderIDRequest) (*PostCancelOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostCancelByClientOrderID not implemented")
}
func (UnimplementedApiServer) PostCancelAll(context.Context, *PostCancelAllRequest) (*PostCancelAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostCancelAll not implemented")
}
func (UnimplementedApiServer) PostReplaceByClientOrderID(context.Context, *PostOrderRequest) (*PostOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostReplaceByClientOrderID not implemented")
}
func (UnimplementedApiServer) PostReplaceOrder(context.Context, *PostReplaceOrderRequest) (*PostOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostReplaceOrder not implemented")
}
func (UnimplementedApiServer) PostSettle(context.Context, *PostSettleRequest) (*PostSettleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostSettle not implemented")
}
func (UnimplementedApiServer) PostTradeSwap(context.Context, *TradeSwapRequest) (*TradeSwapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostTradeSwap not implemented")
}
func (UnimplementedApiServer) GetOrders(context.Context, *GetOrdersRequest) (*GetOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrders not implemented")
}
func (UnimplementedApiServer) GetOpenOrders(context.Context, *GetOpenOrdersRequest) (*GetOpenOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpenOrders not implemented")
}
func (UnimplementedApiServer) GetOrderByID(context.Context, *GetOrderByIDRequest) (*GetOrderByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderByID not implemented")
}
func (UnimplementedApiServer) GetUnsettled(context.Context, *GetUnsettledRequest) (*GetUnsettledResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnsettled not implemented")
}
func (UnimplementedApiServer) PostRouteTradeSwap(context.Context, *RouteTradeSwapRequest) (*TradeSwapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostRouteTradeSwap not implemented")
}
func (UnimplementedApiServer) GetOrderbooksStream(*GetOrderbooksRequest, Api_GetOrderbooksStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetOrderbooksStream not implemented")
}
func (UnimplementedApiServer) GetTickersStream(*GetTickersRequest, Api_GetTickersStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTickersStream not implemented")
}
func (UnimplementedApiServer) GetMarketDepthStream(*GetMarketsRequest, Api_GetMarketDepthStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetMarketDepthStream not implemented")
}
func (UnimplementedApiServer) GetTradesStream(*GetTradesRequest, Api_GetTradesStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTradesStream not implemented")
}
func (UnimplementedApiServer) GetOrderStatusStream(*GetOrderStatusStreamRequest, Api_GetOrderStatusStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetOrderStatusStream not implemented")
}
func (UnimplementedApiServer) GetRecentBlockHashStream(*GetRecentBlockHashRequest, Api_GetRecentBlockHashStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetRecentBlockHashStream not implemented")
}
func (UnimplementedApiServer) GetQuotesStream(*GetQuotesStreamRequest, Api_GetQuotesStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetQuotesStream not implemented")
}
func (UnimplementedApiServer) GetPoolReservesStream(*GetPoolReservesStreamRequest, Api_GetPoolReservesStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPoolReservesStream not implemented")
}
func (UnimplementedApiServer) GetPricesStream(*GetPricesStreamRequest, Api_GetPricesStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPricesStream not implemented")
}
func (UnimplementedApiServer) mustEmbedUnimplementedApiServer() {}

// UnsafeApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiServer will
// result in compilation errors.
type UnsafeApiServer interface {
	mustEmbedUnimplementedApiServer()
}

func RegisterApiServer(s grpc.ServiceRegistrar, srv ApiServer) {
	s.RegisterService(&Api_ServiceDesc, srv)
}

func _Api_GetPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/GetPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetPrice(ctx, req.(*GetPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetMarkets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMarketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetMarkets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/GetMarkets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetMarkets(ctx, req.(*GetMarketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetPools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetPools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/GetPools",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetPools(ctx, req.(*GetPoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetTickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTickersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetTickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/GetTickers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetTickers(ctx, req.(*GetTickersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetKline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKlineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetKline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/GetKline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetKline(ctx, req.(*GetKlineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetOrderbook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderbookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetOrderbook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/GetOrderbook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetOrderbook(ctx, req.(*GetOrderbookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetTrades_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTradesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetTrades(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/GetTrades",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetTrades(ctx, req.(*GetTradesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetQuotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetQuotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/GetQuotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetQuotes(ctx, req.(*GetQuotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetServerTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetServerTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/GetServerTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetServerTime(ctx, req.(*GetServerTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetRecentBlockHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecentBlockHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetRecentBlockHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/GetRecentBlockHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetRecentBlockHash(ctx, req.(*GetRecentBlockHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetAccountBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetAccountBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/GetAccountBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetAccountBalance(ctx, req.(*GetAccountBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_PostOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).PostOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/PostOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).PostOrder(ctx, req.(*PostOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_PostSubmit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostSubmitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).PostSubmit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/PostSubmit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).PostSubmit(ctx, req.(*PostSubmitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_PostSubmitBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostSubmitBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).PostSubmitBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/PostSubmitBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).PostSubmitBatch(ctx, req.(*PostSubmitBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_PostCancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostCancelOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).PostCancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/PostCancelOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).PostCancelOrder(ctx, req.(*PostCancelOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_PostCancelByClientOrderID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostCancelByClientOrderIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).PostCancelByClientOrderID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/PostCancelByClientOrderID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).PostCancelByClientOrderID(ctx, req.(*PostCancelByClientOrderIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_PostCancelAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostCancelAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).PostCancelAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/PostCancelAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).PostCancelAll(ctx, req.(*PostCancelAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_PostReplaceByClientOrderID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).PostReplaceByClientOrderID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/PostReplaceByClientOrderID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).PostReplaceByClientOrderID(ctx, req.(*PostOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_PostReplaceOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostReplaceOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).PostReplaceOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/PostReplaceOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).PostReplaceOrder(ctx, req.(*PostReplaceOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_PostSettle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostSettleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).PostSettle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/PostSettle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).PostSettle(ctx, req.(*PostSettleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_PostTradeSwap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradeSwapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).PostTradeSwap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/PostTradeSwap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).PostTradeSwap(ctx, req.(*TradeSwapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/GetOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetOrders(ctx, req.(*GetOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetOpenOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOpenOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetOpenOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/GetOpenOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetOpenOrders(ctx, req.(*GetOpenOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetOrderByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetOrderByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/GetOrderByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetOrderByID(ctx, req.(*GetOrderByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetUnsettled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUnsettledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetUnsettled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/GetUnsettled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetUnsettled(ctx, req.(*GetUnsettledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_PostRouteTradeSwap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteTradeSwapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).PostRouteTradeSwap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/PostRouteTradeSwap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).PostRouteTradeSwap(ctx, req.(*RouteTradeSwapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetOrderbooksStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetOrderbooksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApiServer).GetOrderbooksStream(m, &apiGetOrderbooksStreamServer{stream})
}

type Api_GetOrderbooksStreamServer interface {
	Send(*GetOrderbooksStreamResponse) error
	grpc.ServerStream
}

type apiGetOrderbooksStreamServer struct {
	grpc.ServerStream
}

func (x *apiGetOrderbooksStreamServer) Send(m *GetOrderbooksStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Api_GetTickersStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetTickersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApiServer).GetTickersStream(m, &apiGetTickersStreamServer{stream})
}

type Api_GetTickersStreamServer interface {
	Send(*GetTickersStreamResponse) error
	grpc.ServerStream
}

type apiGetTickersStreamServer struct {
	grpc.ServerStream
}

func (x *apiGetTickersStreamServer) Send(m *GetTickersStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Api_GetMarketDepthStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetMarketsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApiServer).GetMarketDepthStream(m, &apiGetMarketDepthStreamServer{stream})
}

type Api_GetMarketDepthStreamServer interface {
	Send(*GetMarketDepthStreamResponse) error
	grpc.ServerStream
}

type apiGetMarketDepthStreamServer struct {
	grpc.ServerStream
}

func (x *apiGetMarketDepthStreamServer) Send(m *GetMarketDepthStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Api_GetTradesStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetTradesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApiServer).GetTradesStream(m, &apiGetTradesStreamServer{stream})
}

type Api_GetTradesStreamServer interface {
	Send(*GetTradesStreamResponse) error
	grpc.ServerStream
}

type apiGetTradesStreamServer struct {
	grpc.ServerStream
}

func (x *apiGetTradesStreamServer) Send(m *GetTradesStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Api_GetOrderStatusStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetOrderStatusStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApiServer).GetOrderStatusStream(m, &apiGetOrderStatusStreamServer{stream})
}

type Api_GetOrderStatusStreamServer interface {
	Send(*GetOrderStatusStreamResponse) error
	grpc.ServerStream
}

type apiGetOrderStatusStreamServer struct {
	grpc.ServerStream
}

func (x *apiGetOrderStatusStreamServer) Send(m *GetOrderStatusStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Api_GetRecentBlockHashStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetRecentBlockHashRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApiServer).GetRecentBlockHashStream(m, &apiGetRecentBlockHashStreamServer{stream})
}

type Api_GetRecentBlockHashStreamServer interface {
	Send(*GetRecentBlockHashResponse) error
	grpc.ServerStream
}

type apiGetRecentBlockHashStreamServer struct {
	grpc.ServerStream
}

func (x *apiGetRecentBlockHashStreamServer) Send(m *GetRecentBlockHashResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Api_GetQuotesStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetQuotesStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApiServer).GetQuotesStream(m, &apiGetQuotesStreamServer{stream})
}

type Api_GetQuotesStreamServer interface {
	Send(*GetQuotesStreamResponse) error
	grpc.ServerStream
}

type apiGetQuotesStreamServer struct {
	grpc.ServerStream
}

func (x *apiGetQuotesStreamServer) Send(m *GetQuotesStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Api_GetPoolReservesStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetPoolReservesStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApiServer).GetPoolReservesStream(m, &apiGetPoolReservesStreamServer{stream})
}

type Api_GetPoolReservesStreamServer interface {
	Send(*GetPoolReservesStreamResponse) error
	grpc.ServerStream
}

type apiGetPoolReservesStreamServer struct {
	grpc.ServerStream
}

func (x *apiGetPoolReservesStreamServer) Send(m *GetPoolReservesStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Api_GetPricesStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetPricesStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApiServer).GetPricesStream(m, &apiGetPricesStreamServer{stream})
}

type Api_GetPricesStreamServer interface {
	Send(*GetPricesStreamResponse) error
	grpc.ServerStream
}

type apiGetPricesStreamServer struct {
	grpc.ServerStream
}

func (x *apiGetPricesStreamServer) Send(m *GetPricesStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Api_ServiceDesc is the grpc.ServiceDesc for Api service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Api_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Api",
	HandlerType: (*ApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPrice",
			Handler:    _Api_GetPrice_Handler,
		},
		{
			MethodName: "GetMarkets",
			Handler:    _Api_GetMarkets_Handler,
		},
		{
			MethodName: "GetPools",
			Handler:    _Api_GetPools_Handler,
		},
		{
			MethodName: "GetTickers",
			Handler:    _Api_GetTickers_Handler,
		},
		{
			MethodName: "GetKline",
			Handler:    _Api_GetKline_Handler,
		},
		{
			MethodName: "GetOrderbook",
			Handler:    _Api_GetOrderbook_Handler,
		},
		{
			MethodName: "GetTrades",
			Handler:    _Api_GetTrades_Handler,
		},
		{
			MethodName: "GetQuotes",
			Handler:    _Api_GetQuotes_Handler,
		},
		{
			MethodName: "GetServerTime",
			Handler:    _Api_GetServerTime_Handler,
		},
		{
			MethodName: "GetRecentBlockHash",
			Handler:    _Api_GetRecentBlockHash_Handler,
		},
		{
			MethodName: "GetAccountBalance",
			Handler:    _Api_GetAccountBalance_Handler,
		},
		{
			MethodName: "PostOrder",
			Handler:    _Api_PostOrder_Handler,
		},
		{
			MethodName: "PostSubmit",
			Handler:    _Api_PostSubmit_Handler,
		},
		{
			MethodName: "PostSubmitBatch",
			Handler:    _Api_PostSubmitBatch_Handler,
		},
		{
			MethodName: "PostCancelOrder",
			Handler:    _Api_PostCancelOrder_Handler,
		},
		{
			MethodName: "PostCancelByClientOrderID",
			Handler:    _Api_PostCancelByClientOrderID_Handler,
		},
		{
			MethodName: "PostCancelAll",
			Handler:    _Api_PostCancelAll_Handler,
		},
		{
			MethodName: "PostReplaceByClientOrderID",
			Handler:    _Api_PostReplaceByClientOrderID_Handler,
		},
		{
			MethodName: "PostReplaceOrder",
			Handler:    _Api_PostReplaceOrder_Handler,
		},
		{
			MethodName: "PostSettle",
			Handler:    _Api_PostSettle_Handler,
		},
		{
			MethodName: "PostTradeSwap",
			Handler:    _Api_PostTradeSwap_Handler,
		},
		{
			MethodName: "GetOrders",
			Handler:    _Api_GetOrders_Handler,
		},
		{
			MethodName: "GetOpenOrders",
			Handler:    _Api_GetOpenOrders_Handler,
		},
		{
			MethodName: "GetOrderByID",
			Handler:    _Api_GetOrderByID_Handler,
		},
		{
			MethodName: "GetUnsettled",
			Handler:    _Api_GetUnsettled_Handler,
		},
		{
			MethodName: "PostRouteTradeSwap",
			Handler:    _Api_PostRouteTradeSwap_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetOrderbooksStream",
			Handler:       _Api_GetOrderbooksStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetTickersStream",
			Handler:       _Api_GetTickersStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetMarketDepthStream",
			Handler:       _Api_GetMarketDepthStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetTradesStream",
			Handler:       _Api_GetTradesStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetOrderStatusStream",
			Handler:       _Api_GetOrderStatusStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetRecentBlockHashStream",
			Handler:       _Api_GetRecentBlockHashStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetQuotesStream",
			Handler:       _Api_GetQuotesStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetPoolReservesStream",
			Handler:       _Api_GetPoolReservesStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetPricesStream",
			Handler:       _Api_GetPricesStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api.proto",
}
